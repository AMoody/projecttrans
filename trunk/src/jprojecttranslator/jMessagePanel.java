/*
 * jMessagePanel.java
 *
 * Created on 15 May 2009, 10:56
 * This displays a message panel with the last 20 messages.
 * It also writes to a series of file if they're avaialble.
 * Four methods are availble for writing these strings.
 * writeErrorString is used to write errors from the data stream etc. these will occur during testing
 * but should not occur during normal operation.
 * The file is a csv file and is intended to be processed using a spreadsheet.
 * writeActivityString is used to log data activity. When the local or distant data
 * changes this is written here.
 * The file is a csv file and is intended to be processed using a spreadsheet.
 * writeResultsString is used during bench testing to store test results.
 * The file is a txt file and is intended to be read.
 * writeDiagnosticString is used during bench testing to store diagnostic results.
 * The file is a txt file and is intended to be read.
 * 
 */

package jprojecttranslator;
import java.util.*;
import java.text.SimpleDateFormat;

/**
 *
 * @author  arth
 */
public class jMessagePanel extends javax.swing.JPanel {
    // This sets the number of messages displayed
    private int intMessageQueueLength = 20;
    // This stores the last intMessageQueueLength messages
    private Vector vRecentActivityStrings = new Vector(intMessageQueueLength);
    /** This is used to parse the time for the activity display.*/
    private static SimpleDateFormat fmtTimeFormat = new SimpleDateFormat("HH:mm:ss");     
    // This is a holder for the main class so we can access it's methods
    protected jProjectTranslator oProjectTranslator;
    
    /** Creates new form jMessagePanel */
    public jMessagePanel(jProjectTranslator setMain) {
        oProjectTranslator = setMain;
        initComponents();
    }
    /** This allows the application to write a line to the display. 
     * It is prepended by a date time stamp automatically.
     * @param The string which is to be written
     *
     */
    public synchronized void writeString(String setString){
        String strString;
        strString = "" + (fmtTimeFormat.format(new Date())) + " " + setString;
        vRecentActivityStrings.add(strString);
        if (vRecentActivityStrings.size() > intMessageQueueLength) {
            vRecentActivityStrings.removeElementAt(0);
        }
        jTextPane1.setText(getActivityString());
    }
    
   
    /** This returns a string which contains the recent activity. Each line is terminated
    * in a new line character.*/
    public String getActivityString(){
        Iterator itStrings = vRecentActivityStrings.iterator();
        String tempString = "";
        while (itStrings.hasNext()) {
            tempString = tempString + (String)itStrings.next() + "\n";
        }
        return tempString;
    }
    

    


    
    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(85, 85, 85));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jTextPane1.setBackground(new java.awt.Color(204, 255, 204));
        jTextPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTextPane1.setFont(new java.awt.Font("Monospaced", 1, 14));
        jScrollPane1.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jScrollPane1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
    
}
